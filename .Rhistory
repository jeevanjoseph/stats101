StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(89)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(90)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(909)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(91)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(92)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(30)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
set.seed(49)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
summary(comparison)
for (i in 1:1000){
set.seed(1)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
#summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
#summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
#roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
#summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
#roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
#summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
print(i)
summary(comparison)
}
for (i in 1:1000){
set.seed(1)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
#summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
#summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
#roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
#summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
#roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
#summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
print(i+"-"+predictions_refined$Yes)
summary(comparison)
}
?print
for (i in 1:1000){
set.seed(1)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
#summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
#summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
#roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
#summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
#roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
#summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
print(i)
print(summary(comparison))
}
for (i in 1:1000){
set.seed(i)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
#summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
#summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
#roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
#summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
#roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
#summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
print(i)
print(summary(comparison))
}
set.seed(4)
data$Attrition<- ifelse(data$Churn=="Yes",1,0)
sample<-sample.split(data$Attrition,SplitRatio=.90)
trainingSet <- data[sample,]
testSet <- data[!sample,]
# Logistic Regression Model
model<-glm(Attrition~gender+SeniorCitizen+Partner+Dependents+MultipleLines+
InternetService+OnlineSecurity+OnlineBackup+DeviceProtection+
TechSupport+StreamingTV+StreamingMovies+Contract+PaperlessBilling+
PaymentMethod+Tenure+MonthlyCharges+
TotalCharges , family = binomial(link = "logit"),data = trainingSet)
summary(model)
model_refined<-glm(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure , family = binomial(link = "logit"),data = trainingSet)
summary(model_refined)
## Decision tree model
treemodel <- rpart(Attrition~MultipleLines+SeniorCitizen+InternetService+
OnlineSecurity+TechSupport+ Contract+StreamingTV+
StreamingMovies+PaperlessBilling+PaymentMethod+TotalCharges+
Tenure, data=trainingSet)
summary(treemodel)
## Predict values with tree.
tree_prediction <- predict(treemodel,testSet)
roc.curve(testSet$Attrition,tree_prediction)
predictions_tree<-ifelse(tree_prediction>0.5,"Yes","No")
## Convert to a factor.
predictions_tree<-factor(predictions_tree,labels = c("No","Yes"))
summary(predictions_tree)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
predictions_refined<-ifelse(predictions_logistic>0.5,"Yes","No")
## Convert to a factor.
predictions_refined<-factor(predictions_refined,labels = c("No","Yes"))
summary(predictions_refined)
comparison<-data.frame(predictions_tree,predictions_refined,testSet$Churn)
print(i)
print(summary(comparison))
?rpart
summary(treemodel)
roc.curve(testSet$Attrition,tree_prediction)
## Predict values with logistic regression. threshold = 0.5.
predictions_logistic <- predict(model_refined,testSet,type="response")
roc.curve(testSet$Attrition,predictions_logistic)
table(data$gender,data$Churn)
chisq.test(table(data$gender,data$Churn))
chisq.test(table(data$InternetService,data$Churn))
chisq.test(table(data$Partner,data$Churn))
chisq.test(table(data$Partner,data$Churn))
chisq.test(table(data$Partner,data$Churn))
table(data$Partner,data$Churn)
tab<-table(data$Partner,data$Churn)
tab
chisq.test(tab)
chisq.test(tab)$expected
View(data)
View(data)
write.csv(data,'cleaned_data.csv')
### Logistic regtression - preparing datasets
install.packages("caTools")
install.packages("caTools")
